// @flow
/* eslint-disable no-use-before-define */
/**
 * dolus
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "http://localhost:1080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type Callback = {
    /**
     * 
     * @type {string}
     * @memberof Callback
     */
    httpMethod: string;
    /**
     * 
     * @type {Object}
     * @memberof Callback
     */
    requestBody?: Object;
    /**
     * 
     * @type {string}
     * @memberof Callback
     */
    url: string;
    /**
     * 
     * @type {number}
     * @memberof Callback
     */
    timeout: number;
}

/**
 * 
 * @export
 */
export type Expectation = {
    /**
     * 
     * @type {number}
     * @memberof Expectation
     */
    priority: number;
    /**
     * 
     * @type {Request}
     * @memberof Expectation
     */
    request: Request;
    /**
     * 
     * @type {Response}
     * @memberof Expectation
     */
    response: Response;
    /**
     * 
     * @type {Callback}
     * @memberof Expectation
     */
    callback?: Callback;
}

/**
 * 
 * @export
 */
export type Expectations = {
    /**
     * 
     * @type {Array<Expectation>}
     * @memberof Expectations
     */
    expectations: Array<Expectation>;
}

/**
 * 
 * @export
 */
export type PostV1DolusExpectationsRequest = {
    /**
     * 
     * @type {number}
     * @memberof PostV1DolusExpectationsRequest
     */
    priority: number;
    /**
     * 
     * @type {PostV1DolusExpectationsRequestRequest}
     * @memberof PostV1DolusExpectationsRequest
     */
    request: PostV1DolusExpectationsRequestRequest;
    /**
     * 
     * @type {PostV1DolusExpectationsRequestResponse}
     * @memberof PostV1DolusExpectationsRequest
     */
    response: PostV1DolusExpectationsRequestResponse;
    /**
     * 
     * @type {Callback}
     * @memberof PostV1DolusExpectationsRequest
     */
    callback?: Callback;
}

/**
 * 
 * @export
 */
export type PostV1DolusExpectationsRequestRequest = {
    /**
     * 
     * @type {string}
     * @memberof PostV1DolusExpectationsRequestRequest
     */
    path: string;
    /**
     * 
     * @type {string}
     * @memberof PostV1DolusExpectationsRequestRequest
     */
    method: string;
}

/**
 * 
 * @export
 */
export type PostV1DolusExpectationsRequestResponse = {
    /**
     * 
     * @type {number}
     * @memberof PostV1DolusExpectationsRequestResponse
     */
    status?: number;
}

/**
 * 
 * @export
 */
export type Request = {
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    path: string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    method: string;
    /**
     * 
     * @type {Object}
     * @memberof Request
     */
    body?: Object;
}

/**
 * 
 * @export
 */
export type Response = {
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    status: number;
    /**
     * 
     * @type {Object}
     * @memberof Response
     */
    body?: Object;
}

/**
 * 
 * @export
 */
export type Route = {
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    path: string;
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    operation: string;
}



/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint is for fetching expectations
         * @summary Fetch expectations
         * @throws {RequiredError}
         */
        getV1DolusExpectations(options: RequestOptions): FetchArgs {
            const localVarPath = `/v1/dolus/expectations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @throws {RequiredError}
         */
        getV1DolusLogs(lines?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/v1/dolus/logs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (lines !== undefined) {
                localVarQueryParameter['lines'] = ((lines:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @throws {RequiredError}
         */
        getV1DolusLogsWs(lines?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/v1/dolus/logs/ws`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (lines !== undefined) {
                localVarQueryParameter['lines'] = ((lines:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @throws {RequiredError}
         */
        getV1DolusRoutes(options: RequestOptions): FetchArgs {
            const localVarPath = `/v1/dolus/routes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @throws {RequiredError}
         */
        postV1DolusExpectations(postV1DolusExpectationsRequest?: PostV1DolusExpectationsRequest, options: RequestOptions): FetchArgs {
            const localVarPath = `/v1/dolus/expectations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof postV1DolusExpectationsRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(postV1DolusExpectationsRequest != null ? postV1DolusExpectationsRequest : {}) : (((postV1DolusExpectationsRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type DefaultApiType = { 
    getV1DolusExpectations(options?: RequestOptions): Promise<Expectations>,

    getV1DolusLogs(lines?: number, options?: RequestOptions): Promise<Response>,

    getV1DolusLogsWs(lines?: string, options?: RequestOptions): Promise<Response>,

    getV1DolusRoutes(options?: RequestOptions): Promise<Array<Route>>,

    postV1DolusExpectations(postV1DolusExpectationsRequest?: PostV1DolusExpectationsRequest, options?: RequestOptions): Promise<Response>,
}

/**
 * DefaultApi - factory function to inject configuration 
 * @export
 */
export const DefaultApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): DefaultApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Endpoint is for fetching expectations
         * @summary Fetch expectations
         * @throws {RequiredError}
         */
        getV1DolusExpectations(options?: RequestOptions = {}): Promise<Expectations> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getV1DolusExpectations(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Your GET endpoint
         * @throws {RequiredError}
         */
        getV1DolusLogs(lines?: number, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getV1DolusLogs(lines, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Your GET endpoint
         * @throws {RequiredError}
         */
        getV1DolusLogsWs(lines?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getV1DolusLogsWs(lines, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Your GET endpoint
         * @throws {RequiredError}
         */
        getV1DolusRoutes(options?: RequestOptions = {}): Promise<Array<Route>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getV1DolusRoutes(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary 
         * @throws {RequiredError}
         */
        postV1DolusExpectations(postV1DolusExpectationsRequest?: PostV1DolusExpectationsRequest, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postV1DolusExpectations(postV1DolusExpectationsRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    DefaultApi: DefaultApiType,
 }
